2022-11-08 16:43:38.775 [main] INFO  LSRuntimeObject - Executing Stage: logicSynthesis
2022-11-08 16:43:38.780 [main] INFO  LSRuntimeObject - Executing Algorithm: Yosys
2022-11-08 16:43:39.233 [main] INFO  Yosys - +-----------------------------------------------------
2022-11-08 16:43:39.233 [main] INFO  Yosys - |			    RESULTS
2022-11-08 16:43:39.234 [main] INFO  Yosys - +-----------------------------------------------------
2022-11-08 16:43:39.235 [main] INFO  Yosys - :               NOR cells:       28
2022-11-08 16:43:39.235 [main] INFO  Yosys - :               NOT cells:       17
2022-11-08 16:43:39.235 [main] INFO  Yosys - :        internal signals:       15
2022-11-08 16:43:39.236 [main] INFO  Yosys - :           input signals:        9
2022-11-08 16:43:39.236 [main] INFO  Yosys - :          output signals:        5
2022-11-08 16:43:39.236 [main] INFO  Yosys - +-----------------------------------------------------
2022-11-08 16:43:39.236 [main] INFO  Yosys - 
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 12.0.0 -fPIC -Os)


-- Executing script file `./Circuits/RCA/RCA4/RCA4.ys' --

1. Executing Verilog-2005 frontend: ./Circuits/RCA/RCA4.v
Parsing Verilog input from `./Circuits/RCA/RCA4.v' to AST representation.
Generating RTLIL representation for module `\RCA'.
Generating RTLIL representation for module `\RCA4'.
Successfully finished Verilog frontend.

2. Executing FLATTEN pass (flatten design).
Using template RCA for cells of type RCA.
<suppressed ~4 debug messages>
No more expansions possible.

3. Executing SPLITNETS pass (splitting up multi-bit signals).

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Finding top of design hierarchy..
root of   0 design levels: RCA4                
root of   0 design levels: RCA                 
Automatically selected RCA4 as design top module.

4.2. Analyzing design hierarchy..
Top module:  \RCA4

4.3. Analyzing design hierarchy..
Top module:  \RCA4
Removing unused module `\RCA'.
Removed 1 unused modules.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.3. Executing PROC_INIT pass (extract init attributes).

5.4. Executing PROC_ARST pass (detect async resets in processes).

5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

5.6. Executing PROC_DLATCH pass (convert process syncs to latches).

5.7. Executing PROC_DFF pass (convert process syncs to FFs).

5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6. Executing TECHMAP pass (map to technology primitives).

6.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Running "alumacc" on wrapper $extern:wrap:$add:Y_WIDTH=1:B_WIDTH=1:A_WIDTH=1:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:Y_WIDTH=1:B_WIDTH=1:A_WIDTH=1:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:Y_WIDTH=1:B_WIDTH=1:A_WIDTH=1:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:Y_WIDTH=1:B_WIDTH=1:A_WIDTH=1:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:Y_WIDTH=1:B_WIDTH=1:A_WIDTH=1:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:Y_WIDTH=1:B_WIDTH=1:A_WIDTH=1:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper maccmap for cells of type $macc.
  add $techmap\rca1.$xor$./Circuits/RCA/RCA4.v:28$2_Y * \rca1.Cin (1x1 bits, unsigned)
  add $techmap\rca3.$xor$./Circuits/RCA/RCA4.v:28$2_Y * \rca3.Cin (1x1 bits, unsigned)
  add $techmap\rca4.$xor$./Circuits/RCA/RCA4.v:28$2_Y * \rca4.Cin (1x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
  add $techmap\rca2.$xor$./Circuits/RCA/RCA4.v:28$2_Y * \rca2.Cin (1x1 bits, unsigned)
  add \rca2.A * \rca2.B (1x1 bits, unsigned)
  add \rca1.A * \rca1.B (1x1 bits, unsigned)
  add \rca3.A * \rca3.B (1x1 bits, unsigned)
  add \rca4.A * \rca4.B (1x1 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~213 debug messages>

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module RCA4.
<suppressed ~20 debug messages>

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RCA4'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RCA4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RCA4.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RCA4'.
Removed a total of 0 cells.

7.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RCA4..
Removed 8 unused cells and 164 unused wires.
<suppressed ~9 debug messages>

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module RCA4.

7.9. Rerunning OPT passes. (Maybe there is more to do..)

7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RCA4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RCA4.
Performed a total of 0 changes.

7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RCA4'.
Removed a total of 0 cells.

7.13. Executing OPT_RMDFF pass (remove dff with constant values).

7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RCA4..

7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module RCA4.

7.16. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\RCA4' to `<abc-temp-dir>/input.blif'..
Extracted 20 gates and 29 wires to a netlist network with 9 inputs and 5 outputs.

8.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 5 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:       28
ABC RESULTS:               NOT cells:       17
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        5
Removing temp directory.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module RCA4.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RCA4'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RCA4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RCA4.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RCA4'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RCA4..
Removed 0 unused cells and 35 unused wires.
<suppressed ~10 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module RCA4.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \RCA4

10.2. Analyzing design hierarchy..
Top module:  \RCA4
Removed 0 unused modules.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RCA4..
Removed 0 unused cells and 14 unused wires.
<suppressed ~14 debug messages>

12. Generating Graphviz representation of design.
Writing dot description to `./Circuits/RCA/RCA4/RCA4_yosys.dot'.
Dumping module RCA4 to page 1.
Exec: dot -Tpdf './Circuits/RCA/RCA4/RCA4_yosys.dot' > './Circuits/RCA/RCA4/RCA4_yosys.pdf.new' && mv './Circuits/RCA/RCA4/RCA4_yosys.pdf.new' './Circuits/RCA/RCA4/RCA4_yosys.pdf'

13. Executing EDIF backend.

14. Executing JSON backend.

End of script. Logfile hash: 53c9ef1393, CPU: user 0.06s system 0.01s
Yosys 0.9 (git sha1 UNKNOWN, clang 12.0.0 -fPIC -Os)
Time spent: 17% 3x read_verilog (0 sec), 17% 5x opt_clean (0 sec), ...

2022-11-08 16:43:39.239 [main] INFO  Yosys - 
